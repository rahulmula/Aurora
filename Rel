def invokelambdafunctionurl(argtgtappval) {
	withEnv(["serverName=${argtgtappval.servername}",
		"dbName=${argtgtappval.dbname}",
		"dbUserName=${argtgtappval.dbusername}",
		"dbPassword=${argtgtappval.dbpassword}",
        "s3BucketName=${argtgtappval.s3bucketname}",
        "s3objectPath=${argtgtappval.s3objectpath}",
        "dbArtifactdacpacName=${argtgtappval.dbartifactdacpacname}",
        "lambdaFunctionName=${argtgtappval.lambdafunctionname}",
        "profileName=${argtgtappval.profile}"
	]) {
	bat label: '', script: "PowerShell.exe Set-ExecutionPolicy unrestricted -Scope CurrentUser"
	def msg = powershell(returnStdout: true, script: ".\\Scripts\\DeploymentScripts\\invokelambdafunctionurl.ps1 -lambdafunctionname ${lambdaFunctionName} -servername ${serverName} -dbname ${dbName} -dbusername ${dbUserName} -dbpassword ${dbPassword} -s3bucketname ${s3BucketName} -s3objectpath ${s3objectPath} -dbartifactdacpacname ${dbArtifactdacpacName} -profilename ${profileName}")
	println msg
	}
}

----------------------------------------------------
F:\Jenkins\workspace\QA\ECAT\EMEA\Rooftops\EngDataProcess>PowerShell.exe Set-ExecutionPolicy unrestricted -Scope CurrentUser 
[Pipeline] powershell
14:29:31  Exception Thrown.
14:29:31  Invoke-WebRequest : {"Message":"Forbidden"}
14:29:31  At F:\Jenkins\workspace\QA\ECAT\EMEA\Rooftops\EngDataProcess\Scripts\DeploymentScripts\invokelambdafunctionurl.ps1:23 char:19
14:29:31  + ... etcontent = Invoke-WebRequest -Uri $getUrl -Method POST -UseBasicPars ...
14:29:31  +                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
14:29:31      + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc    eption
14:29:31      + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand

------------------------------------------------
def get_lambda_tags(lambda_client):
    functions = lambda_client.list_functions()['Functions']
    tags_data = []

    for function in functions:
        function_name = function['FunctionName']
        tags = lambda_client.list_tags(Resource=function['FunctionArn']).get('Tags', {})
        for key, value in tags.items():
            tags_data.append(['Lambda', function_name, key, value])
                
    return tags_data
