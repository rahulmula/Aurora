App_Start\WebApiConfig.cs(13,23): error CS0234: The type or namespace name 'Extensions' does not exist in the namespace 'System.Net.Http' (are you missing an assembly reference?) [F:\Jenkins\workspace\Dev\ECAT\FW\AWS\RulesEngineSandBox_Rel\ecat-systems\ecat-systems\EcatSystems.csproj]

F:\Jenkins\workspace\Dev\ECAT\FW\AWS\RulesEngineSandBox_Rel>"C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\MSBuild.exe" "ecat-systems\ecat-systems.sln" /p:Configuration=Release /p:Platform=x64 /t:Rebuild 

Image ARN: arn:aws:imagebuilder:us-east-2:933919336272:image/qa-na-19dv/4.0.0/15 failed with error: Workflow Execution ID: 'wf-8dc24a6f-f299-40a6-807b-4ffee3de4d84' failed with reason: failed to download the EC2 Image Builder Component 'arn:aws:imagebuilder:us-east-2:933919336272:component/qa-na-19dv/5.0.0/1'. Error - operation error imagebuilder: GetComponent, failed to sign request: failed to retrieve credentials: failed to refresh cached credentials, no EC2 IMDS role found, operation error ec2imds: GetMetadata, canceled, context deadline exceeded.


dir(dbName) {
						def msg = powershell(returnStdout: true, script: '& "${env:dbsqlpackagepath}" /Action:Export /ssn:"${env:srcsqlServerName}".database.windows.net /sdn:${env:srcdbName}  /su:"${env:srcdbUserName}" /sp:"${env:srcdbPassword}" /tf:.\\"${env:srcartifactdacpacname}".bacpac')
						println msg
					}


def get_cloudwatch_alarm_tags(cloudwatch_client):
    alarms = cloudwatch_client.describe_alarms()['MetricAlarms']
    tags_data = []

    for alarm in alarms:
        alarm_name = alarm['AlarmName']
        tags = cloudwatch_client.list_tags_for_resource(ResourceARN=alarm['AlarmArn']).get('Tags', [])
        for tag in tags:
            tags_data.append(['CloudWatchAlarm', alarm_name, tag['Key'], tag['Value']])
                
    return tags_data

def get_elb_tags(elbv2_client):
    elbs = elbv2_client.describe_load_balancers()['LoadBalancers']
    tags_data = []

    for elb in elbs:
        elb_arn = elb['LoadBalancerArn']
        tags = elbv2_client.describe_tags(ResourceArns=[elb_arn]).get('TagDescriptions', [])
        for tag_description in tags:
            for tag in tag_description.get('Tags', []):
                tags_data.append(['ELB', elb_arn, tag['Key'], tag['Value']])
                
    return tags_data

def get_asg_tags(asg_client):
    asgs = asg_client.describe_auto_scaling_groups()['AutoScalingGroups']
    tags_data = []

    for asg in asgs:
        asg_name = asg['AutoScalingGroupName']
        tags = asg_client.describe_tags(Filters=[{'Name': 'auto-scaling-group', 'Values': [asg_name]}]).get('Tags', [])
        for tag in tags:
            tags_data.append(['ASG', asg_name, tag['Key'], tag['Value']])
                
    return tags_data

def get_elastic_ip_tags(ec2_client):
    elastic_ips = ec2_client.describe_addresses()['Addresses']
    tags_data = []

    for elastic_ip in elastic_ips:
        allocation_id = elastic_ip['AllocationId']
        tags = ec2_client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [allocation_id]}]).get('Tags', [])
        for tag in tags:
            tags_data.append(['EIP', allocation_id, tag['Key'], tag['Value']])
                
    return tags_data

def get_all_tags():
    # Replace 'YOUR_REGION' with your AWS region
    region = 'YOUR_REGION'

    # Replace 'YOUR_ACCESS_KEY' and 'YOUR_SECRET_KEY' with your AWS access key and secret key
    aws_access_key = 'YOUR_ACCESS_KEY'
    aws_secret_key = 'YOUR_SECRET_KEY'

    # Create AWS clients for EC2, ELB, ASG
    ec2_client = boto3.client('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    elbv2_client = boto3.client('elbv2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    asg_client = boto3.client('autoscaling', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

    # Get tags for each resource type
    ec2_tags = get_ec2_tags(ec2_client)
    s3_tags = get_s3_tags(s3_client)
    rds_tags = get_rds_tags(rds_client)
    elb_tags = get_elb_tags(elbv2_client)
    asg_tags = get_asg_tags(asg_client)
    eip_tags = get_elastic_ip_tags(ec2_client)

    # Create Excel workbook and sheet
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    # Write header row
    sheet.append(['Resource Type', 'Resource ID', 'Tag Key', 'Tag Value'])

    # Append tags for each resource type to the sheet
    for tags_data in [ec2_tags, s3_tags, rds_tags, elb_tags, asg_tags, eip_tags]:
        for row in tags_data:
            sheet.append(row)

    # Save Excel file
    workbook.save('all_tags_output.xlsx')
