import boto3

def get_instance_tags_by_launch_template_id(launch_template_id):
    ec2_client = boto3.client('ec2')

    response = ec2_client.describe_instances(
        Filters=[
            {
                'Name': 'tag:aws:ec2launchtemplate:id',
                'Values': [launch_template_id]
            },
        ]
    )

    instance_tags = []

    for reservation in response.get('Reservations', []):
        for instance in reservation.get('Instances', []):
            tags = instance.get('Tags', [])
            instance_tags.extend(tags)

    return instance_tags

if __name__ == "__main__":
    # Replace 'your_launch_template_id' with the actual launch template ID
    launch_template_id = 'your_launch_template_id'

    # Get instance tags based on launch template ID
    instance_tags = get_instance_tags_by_launch_template_id(launch_template_id)

    if instance_tags:
        print(f"Tags for instances using launch template {launch_template_id}:")
        for tag in instance_tags:
            print(f"{tag['Key']}: {tag['Value']}")
    else:
        print(f"No instances found with launch template ID {launch_template_id}.")

__________________________________________
def get_instance_tags(instance_id):
    ec2_client = boto3.client('ec2')
    
    response = ec2_client.describe_tags(
        Filters=[
            {
                'Name': 'resource-id',
                'Values': [instance_id]
            },
        ]
    )
    
    if 'Tags' in response:
        instance_tags = response['Tags']
        return instance_tags
    else:
        print(f"No tags found for instance {instance_id}.")
        return None

if __name__ == "__main__":
    # Replace 'your_instance_id' with the actual EC2 instance ID
    instance_id = 'your_instance_id'
    
    # Get instance tags
    instance_tags = get_instance_tags(instance_id)
    
    if instance_tags:
        print(f"Tags for EC2 instance {instance_id}:")
        for tag in instance_tags:
            print(f"{tag['Key']}: {tag['Value']}")
    else:
        print("Unable to retrieve instance tags.")

-------------------
def get_launch_template_details(template_name):
    ec2_client = boto3.client('ec2')
    
    response = ec2_client.describe_launch_templates(
        LaunchTemplateNames=[template_name]
    )
    
    if 'LaunchTemplates' in response:
        launch_template = response['LaunchTemplates'][0]
        return launch_template
    else:
        print(f"Launch template with name {template_name} not found.")
        return None

def update_launch_template_tags(template_id, tags):
    ec2_client = boto3.client('ec2')
    
    response = ec2_client.create_tags(
        Resources=[template_id],
        Tags=tags
    )
    
    print(f"Tags updated for launch template {template_id}")
    return response

if __name__ == "__main__":
    # Replace 'your_launch_template_name' with the actual launch template name
    launch_template_name = 'your_launch_template_name'
    
    # Replace 'your_new_tags' with the tags you want to update or add
    new_tags = [
        {'Key': 'Environment', 'Value': 'Production'},
        {'Key': 'Owner', 'Value': 'YourName'}
    ]
    
    # Get launch template details
    launch_template_details = get_launch_template_details(launch_template_name)
    
    if launch_template_details:
        template_id = launch_template_details['LaunchTemplateId']
        
        # Print current tags
        print("Current Tags:")
        print(launch_template_details.get('Tags', []))
        
        # Update launch template tags
        update_launch_template_tags(template_id, new_tags)
    else:
        print("Unable to retrieve launch template details.")




No packages.config, project or solution file specified. Use the -self switch to update NuGet.exe.


Update-Package : The term 'Update-Package' is not recognized as the name of a cmdlet, function, script file, or
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:1
+ Update-Package -Id System.Net.Http.Extensions
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Update-Package:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

App_Start\WebApiConfig.cs(13,23): error CS0234: The type or namespace name 'Extensions' does not exist in the namespace 'System.Net.Http' (are you missing an assembly reference?) [F:\Jenkins\workspace\Dev\ECAT\FW\AWS\RulesEngineSandBox_Rel\ecat-systems\ecat-systems\EcatSystems.csproj]

F:\Jenkins\workspace\Dev\ECAT\FW\AWS\RulesEngineSandBox_Rel>"C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\MSBuild.exe" "ecat-systems\ecat-systems.sln" /p:Configuration=Release /p:Platform=x64 /t:Rebuild 

Image ARN: arn:aws:imagebuilder:us-east-2:933919336272:image/qa-na-19dv/4.0.0/15 failed with error: Workflow Execution ID: 'wf-8dc24a6f-f299-40a6-807b-4ffee3de4d84' failed with reason: failed to download the EC2 Image Builder Component 'arn:aws:imagebuilder:us-east-2:933919336272:component/qa-na-19dv/5.0.0/1'. Error - operation error imagebuilder: GetComponent, failed to sign request: failed to retrieve credentials: failed to refresh cached credentials, no EC2 IMDS role found, operation error ec2imds: GetMetadata, canceled, context deadline exceeded.


dir(dbName) {
						def msg = powershell(returnStdout: true, script: '& "${env:dbsqlpackagepath}" /Action:Export /ssn:"${env:srcsqlServerName}".database.windows.net /sdn:${env:srcdbName}  /su:"${env:srcdbUserName}" /sp:"${env:srcdbPassword}" /tf:.\\"${env:srcartifactdacpacname}".bacpac')
						println msg
					}


def get_cloudwatch_alarm_tags(cloudwatch_client):
    alarms = cloudwatch_client.describe_alarms()['MetricAlarms']
    tags_data = []

    for alarm in alarms:
        alarm_name = alarm['AlarmName']
        tags = cloudwatch_client.list_tags_for_resource(ResourceARN=alarm['AlarmArn']).get('Tags', [])
        for tag in tags:
            tags_data.append(['CloudWatchAlarm', alarm_name, tag['Key'], tag['Value']])
                
    return tags_data

def get_elb_tags(elbv2_client):
    elbs = elbv2_client.describe_load_balancers()['LoadBalancers']
    tags_data = []

    for elb in elbs:
        elb_arn = elb['LoadBalancerArn']
        tags = elbv2_client.describe_tags(ResourceArns=[elb_arn]).get('TagDescriptions', [])
        for tag_description in tags:
            for tag in tag_description.get('Tags', []):
                tags_data.append(['ELB', elb_arn, tag['Key'], tag['Value']])
                
    return tags_data

def get_asg_tags(asg_client):
    asgs = asg_client.describe_auto_scaling_groups()['AutoScalingGroups']
    tags_data = []

    for asg in asgs:
        asg_name = asg['AutoScalingGroupName']
        tags = asg_client.describe_tags(Filters=[{'Name': 'auto-scaling-group', 'Values': [asg_name]}]).get('Tags', [])
        for tag in tags:
            tags_data.append(['ASG', asg_name, tag['Key'], tag['Value']])
                
    return tags_data

def get_elastic_ip_tags(ec2_client):
    elastic_ips = ec2_client.describe_addresses()['Addresses']
    tags_data = []

    for elastic_ip in elastic_ips:
        allocation_id = elastic_ip['AllocationId']
        tags = ec2_client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [allocation_id]}]).get('Tags', [])
        for tag in tags:
            tags_data.append(['EIP', allocation_id, tag['Key'], tag['Value']])
                
    return tags_data

def get_all_tags():
    # Replace 'YOUR_REGION' with your AWS region
    region = 'YOUR_REGION'

    # Replace 'YOUR_ACCESS_KEY' and 'YOUR_SECRET_KEY' with your AWS access key and secret key
    aws_access_key = 'YOUR_ACCESS_KEY'
    aws_secret_key = 'YOUR_SECRET_KEY'

    # Create AWS clients for EC2, ELB, ASG
    ec2_client = boto3.client('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    elbv2_client = boto3.client('elbv2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    asg_client = boto3.client('autoscaling', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)

    # Get tags for each resource type
    ec2_tags = get_ec2_tags(ec2_client)
    s3_tags = get_s3_tags(s3_client)
    rds_tags = get_rds_tags(rds_client)
    elb_tags = get_elb_tags(elbv2_client)
    asg_tags = get_asg_tags(asg_client)
    eip_tags = get_elastic_ip_tags(ec2_client)

    # Create Excel workbook and sheet
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    # Write header row
    sheet.append(['Resource Type', 'Resource ID', 'Tag Key', 'Tag Value'])

    # Append tags for each resource type to the sheet
    for tags_data in [ec2_tags, s3_tags, rds_tags, elb_tags, asg_tags, eip_tags]:
        for row in tags_data:
            sheet.append(row)

    # Save Excel file
    workbook.save('all_tags_output.xlsx')
